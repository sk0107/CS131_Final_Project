{"ast":null,"code":"const API_URL = \"http://localhost:8080\";\nclass HTTPError extends Error {\n  constructor(status, error) {\n    super(status);\n    this.error = error;\n  }\n}\nconst apiRequest = async (method, path, body = null) => {\n  let options = {\n    method: method,\n    headers: {},\n    body: null\n  };\n  if (body instanceof FormData) {\n    options.headers = {}; // Don't set Content-Type for FormData\n    options.body = body;\n  } else if (body) {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.body = JSON.stringify(body);\n  }\n  let uri = API_URL + path;\n  let response = await fetch(uri, options);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    if (response.status === 404) {\n      throw new HTTPError(response.status, \"File not found\");\n    } else if (response.status === 500) {\n      throw new HTTPError(response.status, \"Server error\");\n    } else {\n      throw new HTTPError(response.status, \"Unknown error\");\n    }\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["API_URL","HTTPError","Error","constructor","status","error","apiRequest","method","path","body","options","headers","FormData","JSON","stringify","uri","response","fetch","json"],"sources":["/Users/andrewwu/Desktop/projects/pokedex/src/client/api/apirequest.js"],"sourcesContent":["const API_URL = \"http://localhost:8080\";\n\nclass HTTPError extends Error {\n  constructor(status, error) {\n    super(status);\n    this.error = error;\n  }\n}\n\nconst apiRequest = async (method, path, body = null) => {\n  let options = {\n    method: method,\n    headers: {},\n    body: null\n  }\n  if (body instanceof FormData) {\n    options.headers = {}; // Don't set Content-Type for FormData\n    options.body = body;\n  } else if (body) {\n    options.headers[\"Content-Type\"] = \"application/json\";\n    options.body = JSON.stringify(body);\n  }\n  let uri = API_URL + path;\n  let response = await fetch(uri, options);\n  if (response.status === 200) {\n    return response.json();\n  } else {\n    if (response.status === 404) {\n      throw new HTTPError(response.status, \"File not found\");\n    } else if (response.status === 500) {\n      throw new HTTPError(response.status, \"Server error\");\n    } else {\n      throw new HTTPError(response.status, \"Unknown error\");\n    }\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,SAAS,SAASC,KAAK,CAAC;EAC5BC,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACzB,KAAK,CAACD,MAAM,CAAC;IACb,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;AACF;AAEA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,IAAI,EAAEC,IAAI,GAAG,IAAI,KAAK;EACtD,IAAIC,OAAO,GAAG;IACZH,MAAM,EAAEA,MAAM;IACdI,OAAO,EAAE,CAAC,CAAC;IACXF,IAAI,EAAE;EACR,CAAC;EACD,IAAIA,IAAI,YAAYG,QAAQ,EAAE;IAC5BF,OAAO,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;IACtBD,OAAO,CAACD,IAAI,GAAGA,IAAI;EACrB,CAAC,MAAM,IAAIA,IAAI,EAAE;IACfC,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IACpDD,OAAO,CAACD,IAAI,GAAGI,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;EACrC;EACA,IAAIM,GAAG,GAAGf,OAAO,GAAGQ,IAAI;EACxB,IAAIQ,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAEL,OAAO,CAAC;EACxC,IAAIM,QAAQ,CAACZ,MAAM,KAAK,GAAG,EAAE;IAC3B,OAAOY,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,MAAM;IACL,IAAIF,QAAQ,CAACZ,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIH,SAAS,CAACe,QAAQ,CAACZ,MAAM,EAAE,gBAAgB,CAAC;IACxD,CAAC,MAAM,IAAIY,QAAQ,CAACZ,MAAM,KAAK,GAAG,EAAE;MAClC,MAAM,IAAIH,SAAS,CAACe,QAAQ,CAACZ,MAAM,EAAE,cAAc,CAAC;IACtD,CAAC,MAAM;MACL,MAAM,IAAIH,SAAS,CAACe,QAAQ,CAACZ,MAAM,EAAE,eAAe,CAAC;IACvD;EACF;AACF,CAAC;AAED,eAAeE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}